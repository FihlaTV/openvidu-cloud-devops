---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
  
  KurentoAvailabilityZone:
    Type: String
    Description: must be the name of an existing AWS Availability Zone
    Default: eu-west-1a

  AwsInstanceType:
    Type: String
    Description: Specifies the EC2 instance type for your Kurento instances
    Default: t2.large
    AllowedValues: 
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type."

  KurentoAsgSize:
    Type: String
    Description: >
      Specifies the number of instances which will join the cluster. Defaults to 1.
    Default: '1'

  MyDomainName: 
    Description: "Valid DNS record name like mycompany.com."
    Type: String
    Default: openvidu.mycompany.com
    AllowedPattern: >-
      ^(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d])\.)*(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d]))\.?$
    ConstraintDescription: >-
      Must be a valid DNS name. Like myapp.example.com 
  
  PublicElasticIP:
    Description: "Valid AWS elastic IP for using with Let's Encrypt or OwnCertificate."
    Type: String
    Default: 1.0.2.0
    AllowedPattern: >-
      ^([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])$
    ConstraintDescription: >-
      Must be a valid IP address. A valid IP address must be in the form of xxx.xxx.xxx.xxx, where xxx is a number from 0-255.
  
  OpenViduSecret:
    Description: "Secret to connect to your OpenVidu Server and Kibana Dashboard."
    Type: String
    NoEcho: true

  KibanaUser:
    Description: Username for Kibana Dashboard
    Type: String
    Default: kibanaadmin

  KibanaPassword:
    Description: Password for Kibana Dashboard
    Type: String
    NoEcho: true

  MinOpenPort:
    Description: >-
      Lowest incoming port to be open
    Type: Number
    Default: 1024

  MaxOpenPort:
    Description: >-
      Highest incoming port to be open
    Type: Number
    Default: 65535
  
  WebUICidr:
    Description: >-
      CIDR block that's permitted to port 4443 (OpenVidu PRO) of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  HTTPAccess:
    Description: >-
      CIDR block that's permitted to port 80 (HTTP) of the instance,
      e.g. ALL 0.0.0.0/0. This is used by Let's Encrypt to generate the certificate.
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24

  HTTPSAccess:
    Description: >-
      CIDR block that's permitted to port 443 (HTTPS) of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24

  CoturnPort:
    Description: >-
      CIDR block that's permitted to port 3478 (Coturn) of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24

  SSHCidr:
    Description: >-
      CIDR block that permits SSH for port 22 of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  UDPRange:
    Description: >-
      UDP Range that's permitted from port 1024 to 65535 for TCP of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  TCPRange:
    Description: >-
      TCP Range that's permitted from port 1024 to 65535 for TCP of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  WhichCert: 
    Description: "You can choose from the list below which certificate to use."
    Type: String
    Default: selfsigned
    AllowedValues:
    - selfsigned
    - letsencrypt
    - owncert
  
  LetsEncryptEmail:
    Description: "Email necesary for Let's Encrypt notifications."
    Type: String
  
  OwnCertCRT:
    Description: "URL to the CRT file"
    Type: String

  OwnCertKEY: 
    Description: "URL to the KEY file"
    Type: String

  FreeHTTPAccesToRecordingVideos:
    Description: "Do you want your recordings to be access publicly?"
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  
  OpenviduRecordingNotification:
    Description: "Which users should receive the recording events in the client side (recordingStarted, recordingStopped)."
    Type: String
    Default: "publisher_moderator"
    AllowedValues: 
    - "all"
    - "publisher_moderator"
    - "moderator"
    - "none"
  
  OpenviduStreamsVideoMaxRecvBandwidth: 
    Description: "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: String
    Default: 0
    
  OpenviduStreamsVideoMinRecvBandwidth:
    Description: "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: String
    Default: 0

  OpenviduStreamsVideoMaxSendBandwidth: 
    Description: "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: String
    Default: 0
    
  OpenviduStreamsVideoMinSendBandwidth:
    Description: "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: String
    Default: 0

  OpenViduCidrBlock:
    Description: Dedicated VPC for OpenVidu cluster
    Type: String
    Default: 172.16.0.0/16

  OpenViduSubnet:
    Description: Subnet for OpenVidu cluster
    Type: String
    Default: 172.16.0.0/24

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: SSL Certificate Configuration
        Parameters:
        - WhichCert
        - LetsEncryptEmail
        - MyDomainName
        - PublicElasticIP
        - OwnCertCRT
        - OwnCertKEY
      -
        Label:
          default: Openvidu Configuration
        Parameters:
        - OpenViduSecret
        - FreeHTTPAccesToRecordingVideos
        - OpenviduRecordingNotification
        - OpenviduStreamsVideoMaxRecvBandwidth
        - OpenviduStreamsVideoMinRecvBandwidth
        - OpenviduStreamsVideoMaxSendBandwidth
        - OpenviduStreamsVideoMinSendBandwidth
      -
        Label:
          default: Openvidu Security Group
        Parameters:
        - WebUICidr
        - CoturnPort
        - SSHCidr
        - HTTPSAccess
        - HTTPAccess
        - UDPRange
        - TCPRange
        - MaxOpenPort
        - MinOpenPort
      -
        Label:
          default: Kibana Dashboard
        Parameters:
        - KibanaUser
        - KibanaPassword
      -
        Label:
          default: Networking Info
        Parameters:
        - OpenViduCidrBlock
        - OpenViduSubnet
        - KurentoAvailabilityZone
      - 
        Label:
          default: Clustering options
        Parameters:
        - KurentoAsgSize  

Mappings:
  RegionMap:
    eu-north-1:
      AMI: ami-fe30b880
    ap-south-1:
      AMI: ami-00dd92d5ec4efe42f
    eu-west-3:
      AMI: ami-074fade737a3b6c5a
    eu-west-2:
      AMI: ami-03ae06654506d93bd
    eu-west-1:
      AMI: ami-007e3c932f184b118
    ap-northeast-2:
      AMI: ami-0b5edf72c627a56c9
    ap-northeast-1:
      AMI: ami-0187a903e08b8fd23
    sa-east-1:
      AMI: ami-000921599a5685f05
    ca-central-1:
      AMI: ami-04aa97394c31b1acb
    ap-southeast-1:
      AMI: ami-048e9abf7b87347bb
    ap-southeast-2:
      AMI: ami-087f6b10dc5273252
    eu-central-1:
      AMI: ami-0033d0dbf7f5e92af
    us-east-1:
      AMI: ami-08fb5eb0e3af3d163
    us-east-2:
      AMI: ami-0be769204fc3cab51
    us-west-1:
      AMI: ami-0b1ecb4f6ec8f417b
    us-west-2:
      AMI: ami-0375ca3842950ade6

Conditions: 
  NoSelfSigned:
    'Fn::Not':
      - 'Fn::Equals':
          - Ref: WhichCert
          - selfsigned

Resources:

  OpenViduVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref OpenViduCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: OpenViduVPC

  OpenViduSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref OpenViduSubnet
      VpcId: !Ref OpenViduVPC
      AvailabilityZone: !Ref KurentoAvailabilityZone
      MapPublicIpOnLaunch: 'true'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref OpenViduVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OpenViduVPC

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref OpenViduSubnet1

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties: 
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DescribeInstancesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DescribeInstacePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
      RoleName: DescribeInstancesRole

  OpenviduInstancesProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - DescribeInstancesRole
    DependsOn:
      - DescribeInstancesRole

  KurentoLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref AwsInstanceType
      EbsOptimized: false
      AssociatePublicIpAddress: true
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref OpenviduInstancesProfile
      SecurityGroups:
        - !Ref KMSSecurityGroup
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs: 
            VolumeSize: "50"
            VolumeType: "io1"
            Iops: 200
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update
          apt-get -y install \
            python \
            git \
            software-properties-common \
            awscli \
            python-apt

          apt-add-repository -y ppa:ansible/ansible
          apt-get update 
          apt-get install -y ansible

          export AWS_DEFAULT_REGION=${AWS::Region}

          mkdir -p /usr/src/openvidu
          cd /usr/src/openvidu
          git clone https://github.com/OpenVidu/openvidu-cloud-devops.git
          cd openvidu-cloud-devops/clustering

          OPENVIDU_IP=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[PublicIpAddress]' --output text --filters Name=instance-state-name,Values=running Name=tag:ov-cluster-member,Values=server)

          sed -i "s/OPENVIDU_INSTANCE_PUBLIC_IP/$OPENVIDU_IP/" group_vars/all
          sed -i "s/MY_SECRET/${OpenViduSecret}/" group_vars/all

          cat>play.yml<<EOF
          - hosts: all
            roles:
              - kms
              - file-server
              
          EOF

          ansible-playbook -i "localhost," -c local play.yml 

  KurentoAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !Ref KurentoAvailabilityZone
      LaunchConfigurationName: !Ref KurentoLaunchConfiguration
      MinSize: !Ref KurentoAsgSize
      MaxSize: !Ref KurentoAsgSize
      DesiredCapacity: !Ref KurentoAsgSize
      VPCZoneIdentifier: 
        - !Ref OpenViduSubnet1
      Tags:
        - Key: Name
          Value: 'Kurento Media Server'
          PropagateAtLaunch: 'true'
        - Key: 'ov-cluster-member'
          Value: 'kms'
          PropagateAtLaunch: 'true'

  OpenViduServer:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: OpenVidu Pro
      AWS::CloudFormation::Init:
        config:
          files:
            "/usr/local/bin/installSoftware.sh":
              content: |
                #!/bin/bash -xe
                apt-get update
                apt-get -y install \
                  python \
                  python-setuptools \
                  python-apt \
                  git \
                  software-properties-common \
                  awscli \
                  ec2-ami-tools

                easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

                apt-add-repository -y ppa:ansible/ansible
                apt-get update 
                apt-get install -y ansible
                ansible-galaxy install -p /etc/ansible/roles geerlingguy.docker
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/getOpenVidu.sh":
              content: |
                #!/bin/bash -xe
                mkdir -p /usr/src/openvidu
                cd /usr/src/openvidu
                git clone https://github.com/OpenVidu/openvidu-cloud-devops.git
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/feedGroupVars.sh":
              content: !Sub |
                #!/bin/bash -xe
                
                cd /usr/src/openvidu/openvidu-cloud-devops/clustering
                
                PIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)

                sed -i "s/OPENVIDU_INSTANCE_PUBLIC_IP/$PIP/" group_vars/all
                sed -i "s/AOPENVIDU_INSTANCE_PUBLIC_DOMAIN_NAME/$PublicHostname/" group_vars/all
                sed -i "s/whichcert: selfsigned/whichcert: ${WhichCert}/" group_vars/all
                sed -i "s/DOMAIN_NAME/${MyDomainName}/" group_vars/all
                sed -i "s/LETSENCRYPT_EMAIL/${LetsEncryptEmail}/" group_vars/all
                sed -i "s/MY_SECRET/${OpenViduSecret}/" group_vars/all
                sed -i "s/FREEHTTPACCESTORECORDINGVIDEOS/${FreeHTTPAccesToRecordingVideos}/" group_vars/all
                sed -i "s/run_ec2: false/run_ec2: true/" group_vars/all
                sed -i "s/OPENVIDURECORDINGNOTIFICATION/${OpenviduRecordingNotification}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-RECV-BANDWIDTH/${OpenviduStreamsVideoMaxRecvBandwidth}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-RECV-BANDWIDTH/${OpenviduStreamsVideoMinRecvBandwidth}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-SEND-BANDWIDTH/${OpenviduStreamsVideoMaxSendBandwidth}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-SEND-BANDWIDTH/${OpenviduStreamsVideoMinSendBandwidth}/" group_vars/all
                MIDDLE=$(( ( ${MinOpenPort} + ${MaxOpenPort} ) / 2 ))
                MIDDLEPLUSONE=$(( $MIDDLE + 1 ))
                sed -i "s/TURN_MIN_PORT/${MinOpenPort}/" group_vars/all
                sed -i "s/TURN_MAX_PORT/$MIDDLE/" group_vars/all
                sed -i "s/KURENTO_MIN_PORT/$MIDDLEPLUSONE/" group_vars/all
                sed -i "s/KURENTO_MAX_PORT/${MaxOpenPort}/" group_vars/all
                sed -i "s/KIBANA_USERNAME/${KibanaUser}/" group_vars/all
                sed -i "s/KIBANA_PASSWORD/${KibanaPassword}/" group_vars/all
                sed -i "s/AWS_DEFAULT_REGION/${AWS::Region}/" group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/buildCerts.sh":
              content: !Sub |
                #!/bin/bash
                cd /usr/src/openvidu/openvidu-cloud-devops/clustering/roles/nginx/files
                wget -O nginx.crt ${OwnCertCRT}
                wget -O nginx.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref AwsInstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref OpenviduInstancesProfile
      SubnetId: !Ref OpenViduSubnet1
      SecurityGroupIds:
        - !GetAtt 'OpenViduSecurityGroup.GroupId'
      Tags:
        - Key: Name
          Value: 'OpenVidu Server'
        - Key: 'ov-cluster-member'
          Value: 'server'
      UserData:
        "Fn::Base64": 
          !Sub |
            #!/bin/bash -xe

            apt-get update
            apt-get install -y python-pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenViduServer

            /usr/local/bin/installSoftware.sh || { echo "[Openvidu] error installing software"; exit 1; }

            /usr/local/bin/getOpenVidu.sh || { echo "[Openvidu] error installing OpenVidu"; exit 1; }

            /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }

            if [ "${WhichCert}" == "owncert" ]; then
              /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
            fi

            cd /usr/src/openvidu/openvidu-cloud-devops/clustering            

            cat>play.yml<<EOF
            - hosts: all
              roles:
                - geerlingguy.docker
                - nginx
                - openvidu
                - elastic
                - supervisord
                - system-shutdown
                - coturn
            EOF

            ansible-playbook -i "localhost," -c local play.yml

            # Wait for the app
            /usr/local/bin/check_app_ready.sh

            # sending the finish call
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}
          
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 50
      
  KMSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref OpenViduVPC
      GroupDescription: SSH, Proxy and KMS WebRTC Ports
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: !Ref MinOpenPort
          ToPort: !Ref MaxOpenPort
          CidrIp: !Ref UDPRange
        - IpProtocol: tcp
          FromPort: !Ref MinOpenPort
          ToPort: !Ref MaxOpenPort
          CidrIp: !Ref TCPRange
        - CidrIp: !Ref SSHCidr
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'

  OpenViduSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH, Proxy and OpenVidu WebRTC Ports
      VpcId: !Ref OpenViduVPC      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: !Ref WebUICidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HTTPAccess
        - IpProtocol: tcp
          FromPort: 3478
          ToPort: 3478
          CidrIp: !Ref CoturnPort
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref HTTPSAccess
        - IpProtocol: udp
          FromPort: !Ref MinOpenPort
          ToPort: !Ref MaxOpenPort
          CidrIp: !Ref UDPRange
        - IpProtocol: tcp
          FromPort: !Ref MinOpenPort
          ToPort: !Ref MaxOpenPort
          CidrIp: !Ref TCPRange
  
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: 1

  MyEIP:
    Type: AWS::EC2::EIPAssociation
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenViduServer
      EIP: !Ref PublicElasticIP

Outputs:
  OpenViduInspector:
    Description: "Use this URL to connect OpenVidu with user and password"
    Value: !Join 
        - ''
        - - 'https://'
          - !GetAtt OpenViduServer.PublicDnsName 
          - '/inspector'

  OpenViduInspectorLE:
    Description: "Use this URL to connect to OpenVidu with user and password if you're using Let's Encrypt"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - '/inspector'
    Condition: NoSelfSigned
  
  Kibana:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !GetAtt OpenViduServer.PublicDnsName
          - '/kibana'

  KibanaLE:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - '/kibana'
    Condition: NoSelfSigned
