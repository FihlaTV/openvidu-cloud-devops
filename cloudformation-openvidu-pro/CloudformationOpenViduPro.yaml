---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Openvidu Server Pro CloudFormation template."

Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance."
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
  
  InstanceType:
    Description: "EC2 Instance type"
    Type: String
    Default: t2.2xlarge
    AllowedValues: 
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type."

  MyDomainName: 
    Description: "Valid DNS record name like mycompany.com."
    Type: String
    Default: openvidu.mycompany.com
    AllowedPattern: >-
      ^(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d])\.)*(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d]))\.?$
    ConstraintDescription: >-
      Must be a valid DNS name. Like myapp.example.com 
  
  PublicElasticIP:
    Description: "Valid AWS elastic IP for using with Let's Encrypt or OwnCertificate."
    Type: String
    Default: 1.0.2.0
    AllowedPattern: >-
      ^([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])$
    ConstraintDescription: >-
      Must be a valid IP address. A valid IP address must be in the form of xxx.xxx.xxx.xxx, where xxx is a number from 0-255.
  
  OpenViduSecret:
    Description: "Secret to connect to your OpenVidu Server and Kibana Dashboard."
    Type: String
    NoEcho: true

  KibanaUser:
    Description: Username for Kibana Dashboard
    Type: String
    Default: kibanaadmin

  KibanaPassword:
    Description: Password for Kibana Dashboard
    Type: String
    NoEcho: true

  MinOpenPort:
    Description: >-
      Lowest incoming port to be open
    Type: Number
    Default: 1024

  MaxOpenPort:
    Description: >-
      Highest incoming port to be open
    Type: Number
    Default: 65535
  
  WebUICidr:
    Description: >-
      CIDR block that's permitted to port 4443 (OpenVidu PRO) of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  HTTPAccess:
    Description: >-
      CIDR block that's permitted to port 80 (HTTP) of the instance,
      e.g. ALL 0.0.0.0/0. This is used by Let's Encrypt to generate the certificate.
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  CoturnPort:
    Description: >-
      CIDR block that's permitted to port 3478 (Coturn) of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24

  HTTPSPort:
    Description: >-
      CIDR block that's permitted to port 443 (HTTPS) of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  SSHCidr:
    Description: >-
      CIDR block that permits SSH for port 22 of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  UDPRange:
    Description: >-
      UDP Range that's permitted from port 1024 to 65535 for TCP of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  TCPRange:
    Description: >-
      TCP Range that's permitted from port 1024 to 65535 for TCP of the instance,
      e.g. ALL 0.0.0.0/0
    Type: String
    Default: 192.168.1.100/32
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: >-
      Must be in CIDR notation. To specify one specifc IPv4 address, append /32.
      eg: 192.168.1.100/32 or a subnet group 192.168.1.0/24
  
  WhichCert: 
    Description: "You can choose from the list below which certificate to use."
    Type: String
    Default: selfsigned
    AllowedValues:
    - selfsigned
    - letsencrypt
    - owncert
  LetsEncryptEmail:
    Description: "Email necesary for Let's Encrypt notifications."
    Type: String
  
  OwnCertCRT:
    Description: "URL to the CRT file"
    Type: String

  OwnCertKEY: 
    Description: "URL to the KEY file"
    Type: String

  FreeHTTPAccesToRecordingVideos:
    Description: "Do you want your recordings to be access publicly?"
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  
  OpenviduRecordingNotification:
    Description: "Which users should receive the recording events in the client side (recordingStarted, recordingStopped)."
    Type: String
    Default: "publisher_moderator"
    AllowedValues: 
    - "all"
    - "publisher_moderator"
    - "moderator"
    - "none"
  
  OpenviduStreamsVideoMaxRecvBandwidth: 
    Description: "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: String
    Default: 0
    
  OpenviduStreamsVideoMinRecvBandwidth:
    Description: "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: String
    Default: 0

  OpenviduStreamsVideoMaxSendBandwidth: 
    Description: "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: String
    Default: 0
    
  OpenviduStreamsVideoMinSendBandwidth:
    Description: "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: String
    Default: 0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: SSL Certificate Configuration
        Parameters:
        - WhichCert
        - LetsEncryptEmail
        - MyDomainName
        - PublicElasticIP
        - OwnCertCRT
        - OwnCertKEY
      -
        Label:
          default: Openvidu Configuration
        Parameters:
        - OpenViduSecret
        - FreeHTTPAccesToRecordingVideos
        - OpenviduRecordingNotification
        - OpenviduStreamsVideoMaxRecvBandwidth
        - OpenviduStreamsVideoMinRecvBandwidth
        - OpenviduStreamsVideoMaxSendBandwidth
        - OpenviduStreamsVideoMinSendBandwidth
      -
        Label:
          default: Openvidu Security Group
        Parameters:
        - WebUICidr
        - CoturnPort
        - SSHCidr
        - HTTPSPort
        - HTTPAccess
        - UDPRange
        - TCPRange
        - MaxOpenPort
        - MinOpenPort
      -
        Label:
          default: Kibana Dashboard
        Parameters:
        - KibanaUser
        - KibanaPassword
    
    ParameterLabels:
      WhichCert: 
        default: Type of SSL Certificate
      MyDomainName:
        default: Fully qualified domain name
      PublicElasticIP: 
        default: Elastic IP
      LetsEncryptEmail:
        default: Email
      OpenViduSecret: 
        default: OpenVidu Secret
      FreeHTTPAccesToRecordingVideos: 
        default: Free HTTP access to recorded videos
      WebUICidr: 
        default: Port 4443 access Range
      CoturnPort:
        default: Port 3478 access Range
      SSHCidr:
        default: SSH Port access Range
      HTTPSPort:
        default: HTTPS port access Range
      UDPRange:
        default: UDP Port access Range
      TCPRange:
        default: TCP Port access Range

Mappings:
  RegionMap:
    eu-north-1:
      AMI: ami-851c95fb
    ap-south-1:
      AMI: ami-07c128e60e80e6766
    eu-west-3:
      AMI: ami-07eba027bc5ec8e27
    eu-west-2:
      AMI: ami-04773891d2d406800
    eu-west-1:
      AMI: ami-01bc69b830b49f729
    ap-northeast-2:
      AMI: ami-0a8c567c2272f6d79
    ap-northeast-1:
      AMI: ami-0b86ca67cb64addcf
    sa-east-1:
      AMI: ami-055021d1882c809af
    ca-central-1:
      AMI: ami-0066a22261093fc7a
    ap-southeast-1:
      AMI: ami-010162ac5374d76d3
    ap-southeast-2:
      AMI: ami-09e6fd1e6e5bec813
    eu-central-1:
      AMI: ami-083b8eed05b2a7373
    us-east-1:
      AMI: ami-06d990a360d7a793c
    us-east-2:
      AMI: ami-0c8b8e32659017cc5
    us-west-1:
      AMI: ami-0f1d0daf2937d0064
    us-west-2:
      AMI: ami-0b4a4b368aa8bd6f0

Conditions: 
  NoSelfSigned:
    'Fn::Not':
      - 'Fn::Equals':
          - Ref: WhichCert
          - selfsigned

Resources:
  OpenviduServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Openvidu Pro
      AWS::CloudFormation::Init:
        config:
          files:
            "/usr/local/bin/installSoftware.sh":
              content: |
                #!/bin/bash
                set -eu -o pipefail
                # installing necessary software
                apt-get update
                apt-get install -y awscli \
                  zip \
                  unzip \
                  openjdk-8-jdk \
                  pwgen \
                  nginx \
                  supervisor \
                  ec2-ami-tools \
                  apache2-utils \
                  python-passlib \
                  git
                
                # install coturn
                apt-get install -y coturn

                # install redis
                apt-get install -y redis-server

                # install let's encrypt
                apt-get install -y software-properties-common
                add-apt-repository ppa:certbot/certbot
                apt-get update
                apt-get install -y python-certbot-nginx 

                # installing ansible
                apt-add-repository -y ppa:ansible/ansible
                apt-get update 
                apt-get install -y ansible

                # installing elasticsearch and kibana
                wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
                echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" > /etc/apt/sources.list.d/elastic-6.x.list
                apt-get update
                apt-get install -y elasticsearch kibana
                systemctl enable kibana
                systemctl enable elasticsearch
                systemctl start elasticsearch
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/installKMS.sh":
              content: |
                #!/bin/bash
                set -eu -o pipefail
                echo "deb http://ubuntu.openvidu.io/6.9.0 xenial kms6" > /etc/apt/sources.list.d/kurento.list
                apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83
                apt-get update
                apt-get -y install kurento-media-server
                systemctl enable kurento-media-server
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/installDocker.sh":
              content: !Sub |
                #!/bin/bash
                set -eu -o pipefail
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
                apt-get update 
                apt-get install -y docker-ce
                usermod -aG docker kurento
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/getOpenVidu.sh":
              content: !Sub |
                #!/bin/bash
                set -eu -o pipefail
                
                mkdir -p /opt/openvidu
                chmod 777 /opt/openvidu
                curl -o /opt/openvidu/openvidu-server.jar https://s3-eu-west-1.amazonaws.com/openvidu-pro/openvidu-server-pro-latest.jar
                mkdir -p /usr/src/openvidu
                cd /usr/src/openvidu
                git clone https://github.com/OpenVidu/openvidu-cloud-devops.git
                cd openvidu-cloud-devops
                git checkout dev
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/getPublicInfo.sh":
              content: |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu/openvidu-cloud-devops/cloudformation-openvidu-pro
                PIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                sed -i "s/AWS_EIP/$PIP/" $WORKINGDIR/group_vars/all
                sed -i "s/AWS_PUBLIC_HOSTNAME/$PublicHostname/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/feedGroupVars.sh":
              content: !Sub |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu/openvidu-cloud-devops/cloudformation-openvidu-pro
                sed -i "s/whichcert: selfsigned/whichcert: ${WhichCert}/" $WORKINGDIR/group_vars/all
                sed -i "s/DOMAIN_NAME/${MyDomainName}/" $WORKINGDIR/group_vars/all
                sed -i "s/LETSENCRYPT_EMAIL/${LetsEncryptEmail}/" $WORKINGDIR/group_vars/all
                sed -i "s/openvidusecret: MY_SECRET/openvidusecret: ${OpenViduSecret}/" $WORKINGDIR/group_vars/all
                sed -i "s/FREEHTTPACCESTORECORDINGVIDEOS/${FreeHTTPAccesToRecordingVideos}/" $WORKINGDIR/group_vars/all
                sed -i "s/run_ec2: false/run_ec2: true/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDURECORDINGNOTIFICATION/${OpenviduRecordingNotification}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-RECV-BANDWIDTH/${OpenviduStreamsVideoMaxRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-RECV-BANDWIDTH/${OpenviduStreamsVideoMinRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-SEND-BANDWIDTH/${OpenviduStreamsVideoMaxSendBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-SEND-BANDWIDTH/${OpenviduStreamsVideoMinSendBandwidth}/" $WORKINGDIR/group_vars/all
                MIDDLE=$(( ( ${MinOpenPort} + ${MaxOpenPort} ) / 2 ))
                MIDDLEPLUSONE=$(( $MIDDLE + 1 ))
                sed -i "s/TURN_MIN_PORT/${MinOpenPort}/" $WORKINGDIR/group_vars/all
                sed -i "s/TURN_MAX_PORT/$MIDDLE/" $WORKINGDIR/group_vars/all
                sed -i "s/KURENTO_MIN_PORT/$MIDDLEPLUSONE/" $WORKINGDIR/group_vars/all
                sed -i "s/KURENTO_MAX_PORT/${MaxOpenPort}/" $WORKINGDIR/group_vars/all
                sed -i "s/KIBANA_USERNAME/${KibanaUser}/" $WORKINGDIR/group_vars/all
                sed -i "s/KIBANA_PASSWORD/${KibanaPassword}/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/buildCerts.sh":
              content: !Sub |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu/openvidu-cloud-devops/cloudformation-openvidu-pro
                wget -O $WORKINGDIR/roles/nginx/files/nginx.crt ${OwnCertCRT}
                wget -O $WORKINGDIR/roles/nginx/files/nginx.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref OpenviduServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          set -eu -o pipefail
          
          apt-get update
          apt-get install -y python-pip
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenviduServer

          /usr/local/bin/installSoftware.sh || { echo "[Openvidu] error installing software"; exit 1; }

          /usr/local/bin/installKMS.sh || { echo "[Openvidu] error installing KMS"; exit 1; }
           
          /usr/local/bin/installDocker.sh || { echo "[Openvidu] error installing Docker"; exit 1; }
           
          /usr/local/bin/getOpenVidu.sh || { echo "[Openvidu] error installing OpenVidu"; exit 1; }

          /usr/local/bin/getPublicInfo.sh || { echo "[Openvidu] Network problem"; exit 1; }
          
          /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }
          
          if [ "${WhichCert}" == "owncert" ]; then
            /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
          fi
          
          pushd /usr/src/openvidu/openvidu-cloud-devops/cloudformation-openvidu-pro
          ansible-playbook -i "localhost," -c local play.yml
          popd

          # Wait for the app
          /usr/local/bin/check_app_ready.sh

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}
  
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 50

  OpenviduServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH, Proxy and OpenVidu WebRTC Ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: !Ref WebUICidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HTTPAccess
        - IpProtocol: tcp
          FromPort: 3478
          ToPort: 3478
          CidrIp: !Ref CoturnPort
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref HTTPSPort
        - IpProtocol: udp
          FromPort: !Ref MinOpenPort
          ToPort: !Ref MaxOpenPort
          CidrIp: !Ref UDPRange
        - IpProtocol: tcp
          FromPort: !Ref MinOpenPort
          ToPort: !Ref MaxOpenPort
          CidrIp: !Ref TCPRange

  MyEIP:
    Type: AWS::EC2::EIPAssociation
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenviduServer
      EIP: !Ref PublicElasticIP

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: 1

Outputs:
  WebsiteURL:
    Description: "Use this URL to connect OpenVidu with user and password"
    Value: !Join 
        - ''
        - - 'https://'
          - !GetAtt OpenviduServer.PublicDnsName 
          - ':4443'
  
  WebsiteURLLE:
    Description: "Use this URL to connect to OpenVidu with user and password if you're using Let's Encrypt"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - ':4443'
    Condition: NoSelfSigned

  KibanaDashboard:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !GetAtt OpenviduServer.PublicDnsName
          - '/kibana'

  KibanaDashboardLE:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - '/kibana'
    Condition: NoSelfSigned