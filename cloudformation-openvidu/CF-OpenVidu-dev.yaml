AWSTemplateFormatVersion: 2010-09-09
Description: Deploying OpenVidu Server over AWS

Parameters:

  # SSL certificate configuration

  WhichCert:
    Description: "You can choose from the list below which certificate mode to use"
    Type: String
    AllowedValues:
      - selfsigned
      - letsencrypt
      - owncert
    Default: selfsigned

  LetsEncryptEmail:
    Description: "Email necessary for Let's Encrypt notifications"
    Type: String

  MyDomainName:
    Description: "Valid DNS record name like mycompany.com"
    Type: String
    AllowedPattern: ^(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d])\.)*(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d]))\.?$
    Default: openvidu.mycompany.com
    ConstraintDescription: Must be a valid DNS name. Like myapp.example.com

  PublicElasticIP:
    Description: "Valid AWS elastic IP for using with Let's Encrypt or OwnCertificate."
    Type: String
    AllowedPattern: ^([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])$
    Default: 1.0.2.0
    ConstraintDescription: Must be a valid IP address. A valid IP address must be in the form of xxx.xxx.xxx.xxx, where xxx is a number from 0-255

  OwnCertCRT:
    Description: "URL to the CRT file"
    Type: String

  OwnCertKEY:
    Description: "URL to the KEY file"
    Type: String

  # OpenVidu configuration

  OpenViduSecret:
    Description: "Secret to connect to your OpenVidu Server. No whitespaces or quotations allowed. NOTE: If you deploy the demos (see 'Other configuration' section below) password must be MY_SECRET or the demos won't be able to connect to OpenVidu out-of-the-box"
    Type: String
    AllowedPattern: ^((?!")(?! ).)*$
    Default: MY_SECRET
    NoEcho: true

  # Other configuration

  InstanceType:
    Description: "Specifies the EC2 instance type for your OpenVidu instance"
    Type: String
    Default: t2.xlarge
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5d.xlarge
      - c5d.2xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: "Must be a valid EC2 instance type"

  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: "must be the name of an existing EC2 KeyPair"

  WantToDeployDemos:
    Description: "Choose if you want to deploy OpenVidu call application. If true, then parameter openvidu.secret must be MY_SECRET for the demos to work out-of-the-box"
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  WantToSendInfo:
    Description: "Do you agree to send anonymous information to OpenVidu team for statistics?"
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

Mappings:
  OVAMIMAP:
    eu-west-1:
      AMI: OV_AMI_ID

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: SSL certificate configuration
        Parameters:
          - WhichCert
          - LetsEncryptEmail
          - MyDomainName
          - PublicElasticIP
          - OwnCertCRT
          - OwnCertKEY
      - Label:
          default: OpenVidu configuration (https://openvidu.io/docs/reference-docs/openvidu-server-params)
        Parameters:
          - OpenViduSecret
      - Label:
          default: Other configuration
        Parameters:
          - InstanceType
          - KeyName
          - WantToDeployDemos
          - WantToSendInfo

    ParameterLabels:
      # SSL certificate configuration
      WhichCert:
        default: "Choose the certificate"
      LetsEncryptEmail:
        default: "Email for Let's Encrypt certification authority"
      MyDomainName:
        default: "Full qualified domain name"
      PublicElasticIP:
        default: "Public elastic IP (EIP)"
      OwnCertCRT:
        default: "URL to the CRT file"
      OwnCertKEY:
        default: "URL to the key file"
      # OpenVidu configuration
      OpenViduSecret:
        default: "openvidu.secret"
      # Other configuration
      InstanceType:
        default: "Instance type"
      KeyName:
        default: "Key name"
      WantToDeployDemos:
        default: "Deploy Demos"
      WantToSendInfo:
        default: "Do you want to send info to OpenVidu?"

Conditions:
  NoSelfSigned: !Not
    - !Equals
      - !Ref WhichCert
      - selfsigned

Resources:

  OpenviduServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: 'Install and configure OpenVidu Server and Demos'
      AWS::CloudFormation::Init:
        config:
          files:
            '/usr/local/bin/check_app_ready.sh':
              content: |
                #!/bin/bash 
                sleep 1m

                while true; do 
                  HTTP_STATUS=$(curl -Ik http://localhost:5443 | head -n1 | awk '{print $2}')
                  if [ $HTTP_STATUS == 401 ]; then
                    break
                  fi
                  sleep 1
                done
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/feedGroupVars.sh':
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/usr/src/openvidu
                
                # Replace secret
                sed -i "s/OPENVIDU_SECRET=/OPENVIDU_SECRET=${OpenViduSecret}/" $WORKINGDIR/.env

                # Replace domain name
                if [[ "${WhichCert}" == "letsencrypt" || "${WhichCert}" == "owncert" ]]; then
                  sed -i "s/OPENVIDU_DOMAIN_OR_PUBLIC_IP=/OPENVIDU_DOMAIN_OR_PUBLIC_IP=${MyDomainName}/" $WORKINGDIR/.env
                else
                  PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                  sed -i "s/OPENVIDU_DOMAIN_OR_PUBLIC_IP=/OPENVIDU_DOMAIN_OR_PUBLIC_IP=$PublicHostname/" $WORKINGDIR/.env
                fi

                # Replace certificated type
                sed -i "s/CERTIFICATE_TYPE=selfsigned/CERTIFICATE_TYPE=${WhichCert}/" $WORKINGDIR/.env
                sed -i "s/LETSENCRYPT_EMAIL=/LETSENCRYPT_EMAIL=${LetsEncryptEmail}/" $WORKINGDIR/.env
                
                # Without Demos
                if [ "${WantToDeployDemos}" == "false" ]; then
                  sed -i "s/WITH_DEMOS=true/WITH_DEMOS=false/" $WORKINGDIR/docker-compose.yml
                  rm $WORKINGDIR/docker-compose.override.yml
                fi

              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/buildCerts.sh':
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/usr/src/openvidu
                wget -O $WORKINGDIR/owncert/certificate.crt ${OwnCertCRT}
                wget -O $WORKINGDIR/owncert/certificate.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !FindInMap [OVAMIMAP, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          set -eu -o pipefail

          apt-get update
          apt-get install -y git software-properties-common python-pip

          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenviduServer

          /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }
          if [ "${WhichCert}" == "owncert" ]; then
            /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
          fi

          pushd /usr/src/openvidu
          docker-compose up -d
          popd

          # Wait for the app
          /usr/local/bin/check_app_ready.sh

          # Start up the cfn-hup daemon to listen for changes to the Web Server metadata
          /usr/local/bin/cfn-hup -v || { echo "[Openvidu] Failed to start cfn-hup"; exit 1; }

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 100

  MyEIP:
    Type: 'AWS::EC2::EIPAssociation'
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenviduServer
      EIP: !Ref PublicElasticIP

  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH, Proxy and OpenVidu WebRTC Ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5443
          ToPort: 5443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0

Outputs:
  WebsiteURL:
    Description: Use this URL to connect OpenVidu Server
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - OpenviduServer
          - PublicDnsName
  WebsiteURLLE:
    Description: Use this URL to connect to OpenVidu
    Value: !Join
      - ''
      - - 'https://'
        - !Ref MyDomainName
    Condition: NoSelfSigned
  DemosURL:
    Description: If you choose to deploy the demos you can access througt this
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - OpenviduServer
          - PublicDnsName
  DemosURLLE:
    Description: If you choose to deploy the demos with your own DNS name you can access througt this
    Value: !Join
      - ''
      - - 'https://'
        - !Ref MyDomainName
    Condition: NoSelfSigned
